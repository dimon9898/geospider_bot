import json
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardRemove
from aiogram import Router, F
from aiogram.filters import CommandStart
import uuid
import keyboards.user_kb as kb

user = Router() 
logo = FSInputFile('./img/spider.jpg')

@user.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer_photo(photo=logo, 
                               caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n'
                               '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–µ—Ç—å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö\n<b>(–±–∞–∑–æ–≤—ã—Ö | –æ–ø–æ—Ä–Ω—ã—Ö | —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–Ω—ã—Ö)</b> –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π - <b>"–ì–ï–û–°–ü–ê–ô–î–ï–†"!</b>\n\nüì¢ –†–∞–±–æ—Ç—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Å–µ—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.\n\n'
                               '–Ø –±–æ—Ç-–ì–µ–æ—Å–ø–∞–π–¥–µ—Ä üï∑Ô∏è\n',
                               parse_mode='HTML',
                               reply_markup=await kb.user_main_kb())
    
@user.callback_query(F.data == 'back_to_user_main')
async def back_to_user_main(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_photo(photo=logo, 
                               caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n'
                               '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–µ—Ç—å –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö\n<b>(–±–∞–∑–æ–≤—ã—Ö | –æ–ø–æ—Ä–Ω—ã—Ö | —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–Ω—ã—Ö)</b> –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π - <b>"–ì–ï–û–°–ü–ê–ô–î–ï–†"!</b>\n\nüì¢ –†–∞–±–æ—Ç—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Å–µ—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.\n\n'
                               '–Ø –±–æ—Ç-–ì–µ–æ—Å–ø–∞–π–¥–µ—Ä üï∑Ô∏è\n',
                               parse_mode='HTML',
                               reply_markup=await kb.user_main_kb())   
     

@user.callback_query(F.data == 'user_service')
async def user_service(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('<b>üì° –°–µ—Ä–≤–∏—Å—ã</b>\n\n'
                                  '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                                  reply_markup=await kb.user_service_main_kb(),
                                  parse_mode='HTML')    

@user.callback_query(F.data == 'user_verification')
async def user_verification(callback: CallbackQuery):
    await callback.message.delete()
    file = FSInputFile('./files/–ü—Ä–∏–µ–º–Ω–∏–∫–∏.xlsx')
    await callback.message.answer_document(file, reply_markup=await kb.back_to_user_service_main_btn())


@user.callback_query(F.data == 'user_tariff')
async def user_tariff(callback: CallbackQuery):
    await callback.message.delete()
    file = FSInputFile('./files/–¢–∞—Ä–∏—Ñ—ã.png')
    await callback.message.answer_document(file, reply_markup=await kb.back_to_user_service_main_btn())

@user.callback_query(F.data == 'user_contacts')
async def user_contacts(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('<b>üåê –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n'
                                  '<b>üë®‚Äçüíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>  <code>s@geospider.ru</code>\n'
                                  '<b>üì© –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>  <code>m@geospider.ru</code>\n'
                                  '<b>üìû –¢–µ–ª.:</b> +7 (812) 910-13-39\n'
                                  '<b>üì¨ E-mail:</b> <code>mail@geospider.ru</code>\n\n'
                                  '--------<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</b>--------\n\n'
                                  '‚ñ™Ô∏é –ü–Ω. ‚Äì –ü—Ç.: 9:00‚Äì18:00 \n'
                                  '‚ñ™Ô∏é –°–±, –í—Å.: –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
                                  reply_markup=await kb.back_to_user_main_btn(),
                                  parse_mode='HTML')    


@user.callback_query(F.data == 'user_connection')
async def user_connection(callback: CallbackQuery):
    await callback.message.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ "–û—Ç–∫—Ä—ã—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üëá',
                                  reply_markup=await kb.connect())


async def generate_code():
    code = f'{uuid.uuid4().hex[:8].upper()}'
    return code



@user.message(F.web_app_data)
async def get_web_app_data(message: Message):
    user_data = json.loads(message.web_app_data.data)
    user_id = message.from_user.id
    name = str(user_data['fullName'])
    email = str(user_data['emailAddress'])
    organization = str(user_data['nameOrganization'])
    phone = str(user_data['phoneNumber'])
    code = await generate_code()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üéâüéâüéâ\n\n'
                         f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {code}\n'
                         f'ID: {user_id}\n'
                         f'–§–ò–û: {name}\n'
                         f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}\n'
                         f'Email: {email}\n'
                         f'–¢–µ–ª: {phone}',
                         reply_markup=ReplyKeyboardRemove())    